# =============================================================================
# AWS CREDENTIALS TEMPLATE FOR AI AGENT
# =============================================================================
# The AI Agent uses AWS Bedrock/Strands for advanced natural language processing
# This is OPTIONAL - the system works in fallback mode without AWS

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================

# Option 1: Environment Variables (Recommended for Docker/Local)
# Copy these to your .env file:
AWS_ACCESS_KEY_ID=your_aws_access_key_here
AWS_SECRET_ACCESS_KEY=your_aws_secret_key_here
AWS_DEFAULT_REGION=us-east-1

# Option 2: AWS CLI Profile (Recommended for Development)
# Run: aws configure
# Then set in .env:
AWS_PROFILE=default

# Option 3: AWS Credentials File (~/.aws/credentials)
# Create file: ~/.aws/credentials
[default]
aws_access_key_id = your_aws_access_key_here
aws_secret_access_key = your_aws_secret_key_here

[codebase-rag]
aws_access_key_id = your_dedicated_key_here
aws_secret_access_key = your_dedicated_secret_here
region = us-east-1

# Option 4: IAM Role (Recommended for Production)
# Use IAM roles with EC2/ECS/EKS for automatic credential management

# =============================================================================
# REQUIRED AWS PERMISSIONS
# =============================================================================

# The AI Agent needs these AWS Bedrock permissions:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "bedrock:InvokeModel",
                "bedrock:InvokeModelWithResponseStream",
                "bedrock:GetModel",
                "bedrock:ListFoundationModels"
            ],
            "Resource": [
                "arn:aws:bedrock:*::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0",
                "arn:aws:bedrock:*::foundation-model/anthropic.claude-3-haiku-20240307-v1:0"
            ]
        }
    ]
}

# =============================================================================
# TESTING AWS CREDENTIALS
# =============================================================================

# Test AWS CLI access:
aws sts get-caller-identity

# Test Bedrock access:
aws bedrock list-foundation-models --region us-east-1

# =============================================================================
# SECURITY BEST PRACTICES
# =============================================================================

# 1. Use dedicated IAM user for this application
# 2. Rotate credentials regularly  
# 3. Use least privilege permissions
# 4. Never commit credentials to git
# 5. Use AWS Secrets Manager in production
# 6. Enable CloudTrail for audit logging

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# Common Issues:
# 1. "NoCredentialsError" → Check AWS credentials are configured
# 2. "AccessDenied" → Check IAM permissions for Bedrock
# 3. "RegionError" → Ensure Bedrock is available in your region
# 4. "ModelNotFound" → Check model ID is correct for your region

# Regions with Bedrock Claude access:
# - us-east-1 (Virginia)
# - us-west-2 (Oregon)  
# - eu-west-1 (Ireland)
# - ap-southeast-1 (Singapore)

# =============================================================================
# FALLBACK MODE (No AWS Required)
# =============================================================================

# If you don't have AWS credentials, the AI Agent will work in fallback mode:
# - Provides helpful responses directing users to other features
# - All other MVP functionality works normally
# - Search, indexing, graphs, migration planning all functional
# - No degradation of core legacy analysis capabilities

# =============================================================================
# ALTERNATIVE: OpenAI Integration
# =============================================================================

# If you prefer OpenAI over AWS, add to .env:
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_MODEL=gpt-4
OPENAI_ENABLED=true
AI_AGENT_PROVIDER=openai

# OpenAI models supported:
# - gpt-4
# - gpt-4-turbo
# - gpt-3.5-turbo