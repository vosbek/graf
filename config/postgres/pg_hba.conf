# PostgreSQL Client Authentication Configuration File
# pg_hba.conf for Codebase RAG System
#
# This file controls: which hosts are allowed to connect, how clients
# are authenticated, which PostgreSQL user names they can use, which
# databases they can access. Records take one of these forms:
#
# local      DATABASE  USER  METHOD  [OPTIONS]
# host       DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostssl    DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostnossl  DATABASE  USER  ADDRESS  METHOD  [OPTIONS]

# ============================================================================
# LOCAL CONNECTIONS
# ============================================================================

# Local connections (Unix domain sockets)
# "local" is for Unix domain socket connections only
local   all             all                                     trust

# ============================================================================
# IPv4 CONNECTIONS
# ============================================================================

# IPv4 local connections:
host    all             all             127.0.0.1/32            md5

# IPv4 connections from Docker/Podman networks
host    all             all             172.16.0.0/12           md5
host    all             all             172.20.0.0/16           md5
host    all             all             10.0.0.0/8              md5

# Allow connections from specific container networks
host    all             all             172.18.0.0/16           md5  # Default Docker network
host    all             all             172.19.0.0/16           md5  # Custom Docker networks
host    all             all             172.20.0.0/16           md5  # Podman networks

# ============================================================================
# IPv6 CONNECTIONS
# ============================================================================

# IPv6 local connections:
host    all             all             ::1/128                 md5

# IPv6 Docker/Podman networks (if IPv6 is enabled)
host    all             all             fd00::/8                md5

# ============================================================================
# APPLICATION-SPECIFIC CONNECTIONS
# ============================================================================

# Codebase RAG application database connections
host    codebase_rag    codebase_rag    172.20.0.0/16           md5
host    codebase_rag    codebase_rag    10.0.0.0/8              md5

# Test database connections (for development/testing)
host    test_db         test_user       172.20.0.0/16           trust
host    test_db         test_user       127.0.0.1/32            trust

# ============================================================================
# ADMINISTRATIVE CONNECTIONS
# ============================================================================

# Superuser connections (restrict to specific networks)
host    all             postgres        127.0.0.1/32            md5
host    all             postgres        172.20.0.0/16           md5

# Replication connections (for future use)
host    replication     replicator      172.20.0.0/16           md5

# ============================================================================
# MONITORING AND BACKUP CONNECTIONS
# ============================================================================

# Monitoring user connections
host    all             monitoring      172.20.0.0/16           md5
host    all             monitoring      127.0.0.1/32            md5

# Backup user connections
host    all             backup          127.0.0.1/32            md5

# ============================================================================
# DEVELOPMENT SETTINGS
# ============================================================================

# For development environments, you might want to add:
# (Comment out for production)

# Development connections from host machine
# host    all             all             192.168.0.0/16           md5
# host    all             all             10.0.0.0/8               md5

# Trust connections from localhost (development only)
# host    all             all             127.0.0.1/32             trust

# ============================================================================
# SECURITY NOTES
# ============================================================================

# Authentication Methods:
#
# trust    - Allow connection unconditionally (NOT for production)
# reject   - Reject connection unconditionally
# md5      - Require MD5-encrypted password (recommended)
# password - Require plain-text password (NOT recommended)
# scram-sha-256 - More secure than MD5 (recommended for new installations)
# peer     - Use OS user name (local connections only)
# ident    - Use OS user name (with optional user name mapping)
# cert     - Use SSL client certificates
# ldap     - Use LDAP authentication
# radius   - Use RADIUS authentication
# pam      - Use PAM authentication
# gss      - Use GSSAPI authentication
# sspi     - Use SSPI authentication (Windows only)

# Security Best Practices:
#
# 1. Use 'md5' or 'scram-sha-256' authentication for network connections
# 2. Restrict connections to specific IP ranges
# 3. Use dedicated users for applications (not superuser)
# 4. Enable SSL for production deployments
# 5. Monitor connection logs for suspicious activity
# 6. Use firewall rules in addition to pg_hba.conf
# 7. Regularly review and update authentication rules

# ============================================================================
# TROUBLESHOOTING
# ============================================================================

# Common issues:
#
# 1. "no pg_hba.conf entry for host" error:
#    - Add appropriate host entry above
#    - Check IP address/network mask
#    - Ensure reload after changes: SELECT pg_reload_conf();
#
# 2. Authentication failures:
#    - Verify username/password
#    - Check authentication method
#    - Check if user exists: \du in psql
#
# 3. Connection refused:
#    - Check if PostgreSQL is running
#    - Verify listen_addresses in postgresql.conf
#    - Check firewall/network connectivity

# ============================================================================
# RELOAD CONFIGURATION
# ============================================================================

# After making changes to this file, reload the configuration:
# 1. Connect to PostgreSQL as superuser
# 2. Execute: SELECT pg_reload_conf();
# OR
# 3. Restart PostgreSQL service (if reload doesn't work)