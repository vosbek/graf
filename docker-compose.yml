version: '3.8'

services:
  # ChromaDB - Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: codebase-rag-chromadb
    ports:
      - "8000:8000"
    volumes:
      - chromadb_data:/chroma/chroma
      - ./config/chromadb:/chroma/config
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_GRPC_PORT=50051
      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.basic_authn.BasicAuthenticationServerProvider
      - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=/chroma/config/auth.txt
      - CHROMA_DB_IMPL=clickhouse
      - CHROMA_MEMORY_LIMIT_BYTES=68719476736  # 64GB
      - ANONYMIZED_TELEMETRY=false
    networks:
      - codebase-rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64G
          cpus: '16'
        reservations:
          memory: 32G
          cpus: '8'

  # Neo4j - Graph Database
  neo4j:
    image: neo4j:5.15-enterprise
    container_name: codebase-rag-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/codebase-rag-2024
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_PLUGINS=["apoc", "graph-data-science", "graph-algorithms"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*,algo.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*,algo.*
      - NEO4J_dbms_memory_heap_initial_size=8G
      - NEO4J_dbms_memory_heap_max_size=16G
      - NEO4J_dbms_memory_pagecache_size=32G
      - NEO4J_dbms_default_listen_address=0.0.0.0
      - NEO4J_dbms_connector_bolt_advertised_address=localhost:7687
      - NEO4J_dbms_connector_http_advertised_address=localhost:7474
      - NEO4J_dbms_logs_debug_level=INFO
      - NEO4J_dbms_tx_log_rotation_retention_policy=100M size
      - NEO4J_dbms_checkpoint_interval_time=300s
      - NEO4J_dbms_checkpoint_interval_tx=100000
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/import
      - neo4j_plugins:/plugins
      - ./config/neo4j:/conf
      - ./scripts/neo4j:/scripts
    networks:
      - codebase-rag-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "codebase-rag-2024", "MATCH () RETURN count(*) as count"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 56G
          cpus: '16'
        reservations:
          memory: 32G
          cpus: '8'

  # Redis - Task Queue and Caching
  redis:
    image: redis:7-alpine
    container_name: codebase-rag-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - codebase-rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'

  # MinIO - S3-compatible storage for repositories
  minio:
    image: minio/minio:latest
    container_name: codebase-rag-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=codebase-rag
      - MINIO_ROOT_PASSWORD=codebase-rag-2024
      - MINIO_DOMAIN=localhost
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - codebase-rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'

  # PostgreSQL - Metadata and application data
  postgres:
    image: postgres:15-alpine
    container_name: codebase-rag-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=codebase_rag
      - POSTGRES_USER=codebase_rag
      - POSTGRES_PASSWORD=codebase-rag-2024
      - POSTGRES_INITDB_ARGS="--data-checksums"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - codebase-rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codebase_rag -d codebase_rag"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'

  # API Service - FastAPI application
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: codebase-rag-api
    ports:
      - "8080:8080"
    depends_on:
      chromadb:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - APP_ENV=production
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - API_WORKERS=4
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=codebase-rag-2024
      - NEO4J_DATABASE=neo4j
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://codebase_rag:codebase-rag-2024@postgres:5432/codebase_rag
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=codebase-rag
      - MINIO_SECRET_KEY=codebase-rag-2024
      - LOG_LEVEL=INFO
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
    volumes:
      - ./data/repositories:/app/data/repositories
      - ./logs:/app/logs
      - ./config/api:/app/config
    networks:
      - codebase-rag-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'

  # Worker Service - Background processing
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: codebase-rag-worker
    depends_on:
      chromadb:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - APP_ENV=production
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=codebase-rag-2024
      - NEO4J_DATABASE=neo4j
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://codebase_rag:codebase-rag-2024@postgres:5432/codebase_rag
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=codebase-rag
      - MINIO_SECRET_KEY=codebase-rag-2024
      - LOG_LEVEL=INFO
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - MAX_CONCURRENT_REPOS=10
      - BATCH_SIZE=100
    volumes:
      - ./data/repositories:/app/data/repositories
      - ./logs:/app/logs
      - ./config/worker:/app/config
    networks:
      - codebase-rag-network
    restart: unless-stopped
    deploy:
      replicas: 4
      resources:
        limits:
          memory: 16G
          cpus: '8'
        reservations:
          memory: 8G
          cpus: '4'

  # Nginx - Load balancer and reverse proxy
  nginx:
    image: nginx:alpine
    container_name: codebase-rag-nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/sites:/etc/nginx/sites-available
      - ./ssl:/etc/nginx/ssl
    networks:
      - codebase-rag-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: codebase-rag-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - codebase-rag-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'

  # Grafana - Monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: codebase-rag-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=codebase-rag-2024
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/main.json
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/etc/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - codebase-rag-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: codebase-rag-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
    networks:
      - codebase-rag-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'

  # Elasticsearch - Advanced search and logging
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: codebase-rag-elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms4g -Xmx4g
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    networks:
      - codebase-rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'

  # Kibana - Elasticsearch dashboard
  kibana:
    image: kibana:8.11.0
    container_name: codebase-rag-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - codebase-rag-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'

networks:
  codebase-rag-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  chromadb_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local