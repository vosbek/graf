version: "3.8"

services:
  chromadb:
    image: chromadb/chroma:latest
    container_name: codebase-rag-chromadb
    ports:
      - "8000:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - ANONYMIZED_TELEMETRY=false
      # Dev: do NOT set ClickHouse or auth provider
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v2/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 180s
    networks:
      - codebase-rag-network
    restart: unless-stopped
    memory: 2g
    cpus: 2

  neo4j:
    image: neo4j:5.15-enterprise
    container_name: codebase-rag-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/codebase-rag-2024
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_server_memory_heap_initial__size=2G
      - NEO4J_server_memory_heap_max__size=2G
      - NEO4J_server_memory_pagecache_size=4G
      - NEO4J_server_bolt_listen__address=:7687
      - NEO4J_server_http_listen__address=:7474
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p codebase-rag-2024 \"RETURN 1\""]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 180s
    networks:
      - codebase-rag-network
    restart: unless-stopped
    memory: 8g
    cpus: 2

  redis:
    image: redis:7-alpine
    container_name: codebase-rag-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - codebase-rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    memory: 1g
    cpus: 1

  postgres:
    image: postgres:15-alpine
    container_name: codebase-rag-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=codebase_rag
      - POSTGRES_USER=codebase_rag
      - POSTGRES_PASSWORD=codebase-rag-2024
      - POSTGRES_INITDB_ARGS="--data-checksums"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - codebase-rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codebase_rag -d codebase_rag"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    memory: 1g
    cpus: 1

  # Start with external API for testing (will build image later)
  # api:
  #   image: codebase-rag-api
  #   container_name: codebase-rag-api
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     chromadb:
  #       condition: service_healthy
  #     neo4j:
  #       condition: service_healthy
  #   environment:
  #     - APP_ENV=development
  #     - API_HOST=0.0.0.0
  #     - API_PORT=8080
  #     - CHROMA_HOST=chromadb
  #     - CHROMA_PORT=8000
  #     - NEO4J_URI=bolt://neo4j:7687
  #     - NEO4J_USERNAME=neo4j
  #     - NEO4J_PASSWORD=codebase-rag-2024
  #     - NEO4J_DATABASE=neo4j
  #     - LOG_LEVEL=DEBUG
  #     - EMBEDDING_MODEL=microsoft/codebert-base
  #     - AUTH_ENABLED=false
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:8080/api/v1/health/ready || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 10
  #     start_period: 120s
  #   volumes:
  #     - ./logs:/app/logs
  #     - ./data:/app/data
  #   networks:
  #     - codebase-rag-network
  #   restart: unless-stopped
  #   memory: 2g
  #   cpus: 2

networks:
  codebase-rag-network:
    driver: bridge

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  postgres_data: